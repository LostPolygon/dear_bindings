// Autogenerated code

#include "imgui.h"
#include "imgui_internal.h"

// API for exported functions
#define CIMGUI_API extern "C"

#include <stdio.h>
#include <stdarg.h>

// Wrap this in a namespace to keep it separate from the C++ API
namespace cimgui
{
extern "C"
{
#include "cimgui.h"
}
}

// Helper functions
namespace ImGui
{
    // Missing LogTextV implementation, only needed for older ImGui versions (<1.82)
#if IMGUI_VERSION_NUM < 18200
    void LogTextV(const char* fmt, va_list args)
    {
        ImGuiContext& g = *GImGui;
        if (!g.LogEnabled)
            return;

        if (g.LogFile)
            vfprintf(g.LogFile, fmt, args);
        else
            g.LogBuffer.appendfv(fmt, args);
    }
#endif
}

// Manual helpers
// These implement functionality that isn't in the original C++ API, but is useful to callers from other languages

CIMGUI_API void cimgui::ImVector_Construct(void* vector)
{
    // All ImVector classes are the same size, so it doesn't matter which we use for sizeof() here
    memset(vector, 0, sizeof(::ImVector<int>));
}

CIMGUI_API void cimgui::ImVector_Destruct(void* vector)
{
    // As with ImVector_construct(), it doesn't matter what the type parameter is here as we just want to get the
    // pointer and free it (without calling destructors or anything similar)
    ::ImVector<int>* real_vector = reinterpret_cast<::ImVector<int>*>(vector);
    if (real_vector->Data)
    {
        IM_FREE(real_vector->Data);
    }
}


